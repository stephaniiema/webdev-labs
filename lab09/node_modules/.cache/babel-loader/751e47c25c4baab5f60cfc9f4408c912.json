{"ast":null,"code":"var _jsxFileName = \"/Users/stephma/Documents/GitHub/webdev-labs/lab09/src/BookmarkButton.js\";\nimport React from 'react';\nimport { getHeaders } from './utils.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BookmarkButton extends React.Component {\n  constructor(props) {\n    super(props); // data we need: \n    // 1. whether current post is bookmarked\n    //2. current post id (which post)\n\n    this.toggleBookmark = this.toggleBookmark.bind(this);\n    this.bookmark = this.bookmark.bind(this);\n    this.unbookmark = this.unbookmark.bind(this);\n  }\n\n  toggleBookmark(ev) {\n    console.log('likeUnlike');\n\n    if (this.props.bookmarkId) {\n      this.unbookmark();\n    } else {\n      this.bookmark();\n    }\n  }\n\n  bookmark() {\n    console.log('bookmark');\n    fetch('/api/bookmarks', {\n      headers: getHeaders().set('Content-Type', 'application/json'),\n      method: 'POST',\n      body: JSON.stringify({\n        post_id: this.props.postId\n      })\n    }).then(response => response.json()).then(data => {\n      console.log(data);\n    });\n  }\n\n  unbookmark() {\n    console.log('unbookmark');\n    fetch('/api/bookmarks/' + this.props.bookmarkId, {\n      headers: getHeaders(),\n      method: 'DELETE',\n      body: JSON.stringify({\n        post_id: this.props.postId\n      })\n    }).then(response => response.json()).then(data => {\n      console.log(data);\n    });\n  }\n\n  render() {\n    const bookmarkId = this.props.bookmarkId;\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: this.toggleBookmark,\n      \"aria-checked\": bookmarkId ? true : false,\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: bookmarkId ? 'fas fa-bookmark' : 'far fa-bookmark'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default BookmarkButton;","map":{"version":3,"sources":["/Users/stephma/Documents/GitHub/webdev-labs/lab09/src/BookmarkButton.js"],"names":["React","getHeaders","BookmarkButton","Component","constructor","props","toggleBookmark","bind","bookmark","unbookmark","ev","console","log","bookmarkId","fetch","headers","set","method","body","JSON","stringify","post_id","postId","then","response","json","data","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,UAAR,QAAyB,YAAzB;;;AAEA,MAAMC,cAAN,SAA6BF,KAAK,CAACG,SAAnC,CAA6C;AAEzCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAEf;AACA;AACA;;AAEA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcD,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKE,UAAL,GAAkB,KAAKA,UAAL,CAAgBF,IAAhB,CAAqB,IAArB,CAAlB;AACH;;AAEDD,EAAAA,cAAc,CAAEI,EAAF,EAAM;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;;AACA,QAAG,KAAKP,KAAL,CAAWQ,UAAd,EAA0B;AACtB,WAAKJ,UAAL;AACH,KAFD,MAEO;AACH,WAAKD,QAAL;AACH;AACJ;;AAEDA,EAAAA,QAAQ,GAAI;AACRG,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAE,IAAAA,KAAK,CAAC,gBAAD,EAAmB;AACpBC,MAAAA,OAAO,EAAEd,UAAU,GAAGe,GAAb,CAAiB,cAAjB,EAAiC,kBAAjC,CADW;AAEpBC,MAAAA,MAAM,EAAE,MAFY;AAGpBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACC,QAAAA,OAAO,EAAE,KAAKhB,KAAL,CAAWiB;AAArB,OAAf;AAHc,KAAnB,CAAL,CAKCC,IALD,CAKMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EALlB,EAMCF,IAND,CAMMG,IAAI,IAAI;AACVf,MAAAA,OAAO,CAACC,GAAR,CAAYc,IAAZ;AACH,KARD;AASH;;AAEDjB,EAAAA,UAAU,GAAI;AACVE,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAE,IAAAA,KAAK,CAAC,oBAAoB,KAAKT,KAAL,CAAWQ,UAAhC,EAA4C;AAC7CE,MAAAA,OAAO,EAAEd,UAAU,EAD0B;AAE7CgB,MAAAA,MAAM,EAAE,QAFqC;AAG7CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACC,QAAAA,OAAO,EAAE,KAAKhB,KAAL,CAAWiB;AAArB,OAAf;AAHuC,KAA5C,CAAL,CAKCC,IALD,CAKMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EALlB,EAMCF,IAND,CAMMG,IAAI,IAAI;AACVf,MAAAA,OAAO,CAACC,GAAR,CAAYc,IAAZ;AACH,KARD;AAUH;;AAEDC,EAAAA,MAAM,GAAI;AACN,UAAMd,UAAU,GAAG,KAAKR,KAAL,CAAWQ,UAA9B;AACA,wBACI;AACI,MAAA,OAAO,EAAG,KAAKP,cADnB;AAEI,sBAAeO,UAAU,GAAG,IAAH,GAAU,KAFvC;AAAA,6BAGI;AAAG,QAAA,SAAS,EAAGA,UAAU,GAAG,iBAAH,GAAuB;AAAhD;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;;AA1DwC;;AA6D7C,eAAeX,cAAf","sourcesContent":["import React from 'react';\nimport {getHeaders} from './utils.js';\n\nclass BookmarkButton extends React.Component { \n\n    constructor(props) {\n        super(props);\n        // data we need: \n        // 1. whether current post is bookmarked\n        //2. current post id (which post)\n\n        this.toggleBookmark = this.toggleBookmark.bind(this);\n        this.bookmark = this.bookmark.bind(this);\n        this.unbookmark = this.unbookmark.bind(this);\n    }\n\n    toggleBookmark (ev) {\n        console.log('likeUnlike');\n        if(this.props.bookmarkId) {\n            this.unbookmark();\n        } else {\n            this.bookmark();\n        }\n    }\n\n    bookmark () {\n        console.log('bookmark');\n        fetch('/api/bookmarks', {\n            headers: getHeaders().set('Content-Type', 'application/json'),\n            method: 'POST',\n            body: JSON.stringify({post_id: this.props.postId})\n        })\n        .then(response => response.json())\n        .then(data => {\n            console.log(data); \n        })\n    }\n\n    unbookmark () {\n        console.log('unbookmark');\n        fetch('/api/bookmarks/' + this.props.bookmarkId, {\n            headers: getHeaders(),\n            method: 'DELETE',\n            body: JSON.stringify({post_id: this.props.postId})\n        })\n        .then(response => response.json())\n        .then(data => {\n            console.log(data);\n        })\n    \n    }\n\n    render () {\n        const bookmarkId = this.props.bookmarkId;\n        return (\n            <button \n                onClick={ this.toggleBookmark }\n                aria-checked={ bookmarkId ? true : false}>\n                <i className={ bookmarkId ? 'fas fa-bookmark' : 'far fa-bookmark'}></i>\n            </button>\n        ); \n    }\n}\n\nexport default BookmarkButton;"]},"metadata":{},"sourceType":"module"}