{"ast":null,"code":"function getCookie(key) {\n  let name = key + \"=\";\n  let decodedCookie = decodeURIComponent(document.cookie);\n  let ca = decodedCookie.split(';');\n\n  for (let i = 0; i < ca.length; i++) {\n    let c = ca[i];\n\n    while (c.charAt(0) === ' ') {\n      c = c.substring(1);\n    }\n\n    if (c.indexOf(name) === 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n\n  return \"\";\n}\n\nfunction setCookie(name, val) {\n  const d = new Date();\n  const days = 365;\n  d.setTime(d.getTime() + days * 24 * 60 * 60 * 1000);\n  const expires = \"expires=\" + d.toUTCString();\n  document.cookie = name + \"=\" + val + \";\" + expires;\n}\n\nexport function setAccessTokenCookie(username, password, callback) {\n  const postData = {\n    \"username\": username,\n    \"password\": password\n  };\n  fetch(\"/api/token/\", {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(postData)\n  }).then(response => response.json()).then(data => {\n    const token = data.access_token;\n    setCookie('access_token_cookie', token);\n    callback();\n  });\n}\nexport function getAccessTokenCookie() {\n  return getCookie('access_token_cookie'); // || token;\n}\nexport function getHeaders() {\n  const access_token_cookie = getCookie('access_token_cookie');\n  const csrf_access_token = getCookie('csrf_access_token');\n  let headers;\n\n  if (csrf_access_token) {\n    headers = {\n      // 'Content-Type': 'application/json',\n      'X-CSRF-TOKEN': csrf_access_token\n    };\n  } else if (access_token_cookie) {\n    headers = {\n      // 'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + access_token_cookie\n    };\n  } else {\n    console.error('Neither access_token_cookie nor csrf_access_token found');\n  }\n\n  return headers;\n}","map":{"version":3,"sources":["/Users/stephma/Documents/GitHub/webdev-labs/lab09/src/utils.js"],"names":["getCookie","key","name","decodedCookie","decodeURIComponent","document","cookie","ca","split","i","length","c","charAt","substring","indexOf","setCookie","val","d","Date","days","setTime","getTime","expires","toUTCString","setAccessTokenCookie","username","password","callback","postData","fetch","method","headers","body","JSON","stringify","then","response","json","data","token","access_token","getAccessTokenCookie","getHeaders","access_token_cookie","csrf_access_token","console","error"],"mappings":"AAAA,SAASA,SAAT,CAAoBC,GAApB,EAAyB;AACrB,MAAIC,IAAI,GAAGD,GAAG,GAAG,GAAjB;AACA,MAAIE,aAAa,GAAGC,kBAAkB,CAACC,QAAQ,CAACC,MAAV,CAAtC;AACA,MAAIC,EAAE,GAAGJ,aAAa,CAACK,KAAd,CAAoB,GAApB,CAAT;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,EAAE,CAACG,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AAChC,QAAIE,CAAC,GAAGJ,EAAE,CAACE,CAAD,CAAV;;AACA,WAAOE,CAAC,CAACC,MAAF,CAAS,CAAT,MAAgB,GAAvB,EAA4B;AACxBD,MAAAA,CAAC,GAAGA,CAAC,CAACE,SAAF,CAAY,CAAZ,CAAJ;AACH;;AACD,QAAIF,CAAC,CAACG,OAAF,CAAUZ,IAAV,MAAoB,CAAxB,EAA2B;AACvB,aAAOS,CAAC,CAACE,SAAF,CAAYX,IAAI,CAACQ,MAAjB,EAAyBC,CAAC,CAACD,MAA3B,CAAP;AACH;AACJ;;AACD,SAAO,EAAP;AACH;;AAED,SAASK,SAAT,CAAmBb,IAAnB,EAAyBc,GAAzB,EAA8B;AAC1B,QAAMC,CAAC,GAAG,IAAIC,IAAJ,EAAV;AACA,QAAMC,IAAI,GAAG,GAAb;AACAF,EAAAA,CAAC,CAACG,OAAF,CAAUH,CAAC,CAACI,OAAF,KAAeF,IAAI,GAAC,EAAL,GAAQ,EAAR,GAAW,EAAX,GAAc,IAAvC;AACA,QAAMG,OAAO,GAAG,aAAYL,CAAC,CAACM,WAAF,EAA5B;AACAlB,EAAAA,QAAQ,CAACC,MAAT,GAAkBJ,IAAI,GAAG,GAAP,GAAac,GAAb,GAAmB,GAAnB,GAAyBM,OAA3C;AACD;;AAEH,OAAO,SAASE,oBAAT,CAA8BC,QAA9B,EAAwCC,QAAxC,EAAkDC,QAAlD,EAA4D;AAC/D,QAAMC,QAAQ,GAAG;AACb,gBAAYH,QADC;AAEb,gBAAYC;AAFC,GAAjB;AAIAG,EAAAA,KAAK,CAAC,aAAD,EAAgB;AACbC,IAAAA,MAAM,EAAE,MADK;AAEbC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFI;AAKbC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,QAAf;AALO,GAAhB,CAAL,CAOKO,IAPL,CAOUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPtB,EAQKF,IARL,CAQUG,IAAI,IAAI;AACV,UAAMC,KAAK,GAAGD,IAAI,CAACE,YAAnB;AACAzB,IAAAA,SAAS,CAAC,qBAAD,EAAwBwB,KAAxB,CAAT;AACAZ,IAAAA,QAAQ;AACX,GAZL;AAaH;AAED,OAAO,SAASc,oBAAT,GAAiC;AACpC,SAAOzC,SAAS,CAAC,qBAAD,CAAhB,CADoC,CACK;AAC5C;AAED,OAAO,SAAS0C,UAAT,GAAuB;AAC1B,QAAMC,mBAAmB,GAAG3C,SAAS,CAAC,qBAAD,CAArC;AACA,QAAM4C,iBAAiB,GAAG5C,SAAS,CAAC,mBAAD,CAAnC;AACA,MAAI+B,OAAJ;;AACA,MAAIa,iBAAJ,EAAuB;AACnBb,IAAAA,OAAO,GAAG;AACN;AACA,sBAAgBa;AAFV,KAAV;AAIH,GALD,MAKO,IAAID,mBAAJ,EAAyB;AAC5BZ,IAAAA,OAAO,GAAG;AACN;AACA,uBAAiB,YAAYY;AAFvB,KAAV;AAIH,GALM,MAKA;AACHE,IAAAA,OAAO,CAACC,KAAR,CAAc,yDAAd;AACH;;AACD,SAAOf,OAAP;AACH","sourcesContent":["function getCookie (key) {\n    let name = key + \"=\";\n    let decodedCookie = decodeURIComponent(document.cookie);\n    let ca = decodedCookie.split(';');\n    for (let i = 0; i < ca.length; i++) {\n        let c = ca[i];\n        while (c.charAt(0) === ' ') {\n            c = c.substring(1);\n        }\n        if (c.indexOf(name) === 0) {\n            return c.substring(name.length, c.length);\n        }\n    }\n    return \"\";\n}\n\nfunction setCookie(name, val) {\n    const d = new Date();\n    const days = 365;\n    d.setTime(d.getTime() + (days*24*60*60*1000));\n    const expires = \"expires=\"+ d.toUTCString();\n    document.cookie = name + \"=\" + val + \";\" + expires;\n  }\n\nexport function setAccessTokenCookie(username, password, callback) {\n    const postData = {\n        \"username\": username,\n        \"password\": password\n    };\n    fetch(\"/api/token/\", {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(postData)\n        })\n        .then(response => response.json())\n        .then(data => {\n            const token = data.access_token;\n            setCookie('access_token_cookie', token); \n            callback();\n        });\n}\n\nexport function getAccessTokenCookie () {\n    return getCookie('access_token_cookie'); // || token;\n}\n\nexport function getHeaders () {\n    const access_token_cookie = getCookie('access_token_cookie');\n    const csrf_access_token = getCookie('csrf_access_token');\n    let headers;\n    if (csrf_access_token) {\n        headers = {\n            // 'Content-Type': 'application/json',\n            'X-CSRF-TOKEN': csrf_access_token\n        };\n    } else if (access_token_cookie) {\n        headers = {\n            // 'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + access_token_cookie\n        };\n    } else {\n        console.error('Neither access_token_cookie nor csrf_access_token found')\n    }\n    return headers;\n}"]},"metadata":{},"sourceType":"module"}